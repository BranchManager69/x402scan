// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(user)
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

enum ResourceType {
  http
}

model Resources {
  id          String       @id @default(uuid())
  resource    String       @unique
  type        ResourceType
  x402Version Int
  lastUpdated DateTime
  metadata    Json?

  accepts      Accepts[]
}

enum AcceptsScheme {
  exact
}

enum AcceptsNetwork {
  base_sepolia
  avalanche_fuji
  base
  sei
  sei_testnet
  avalanche
  iotex
  solana_devnet
  solana
}

model Accepts {
  id                String         @id @default(uuid())
  resourceId        String
  scheme            AcceptsScheme
  description       String
  network           AcceptsNetwork
  maxAmountRequired BigInt
  resource          String
  mimeType          String
  payTo             String
  maxTimeoutSeconds Int
  asset             String
  outputSchema      Json?
  extra             Json?

  resourceRel Resources      @relation(fields: [resourceId], references: [id])

  @@unique([resourceId, scheme, network])
}

model News {
  id String @id @default(uuid())
  title String
  description String
  image String
  link String
  favicon String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
